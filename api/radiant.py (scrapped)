from flask import Blueprint, request, jsonify
from flask_restful import Api, Resource
import random

# Create blueprint for the store API
radiant_api = Blueprint('radiant_api', __name__, url_prefix='/api')
api = Api(radiant_api)

# Sample product data
products = [
    {"id": 1, "name": "Apple iPhone 13", "price": 799.0},
    {"id": 2, "name": "Samsung Galaxy S21", "price": 699.0},
    {"id": 3, "name": "Google Pixel 6", "price": 599.0},
    {"id": 4, "name": "OnePlus 9", "price": 729.0},
    {"id": 5, "name": "Sony WH-1000XM4 Headphones", "price": 349.0},
    {"id": 6, "name": "Apple MacBook Pro", "price": 1299.0},
    {"id": 7, "name": "Dell XPS 13", "price": 999.0},
    {"id": 8, "name": "HP Spectre x360", "price": 1099.0},
    {"id": 9, "name": "Asus ROG Zephyrus G14", "price": 1449.0},
    {"id": 10, "name": "Nintendo Switch", "price": 299.0},
    {"id": 11, "name": "PlayStation 5", "price": 499.0},
    {"id": 12, "name": "Xbox Series X", "price": 499.0},
    {"id": 13, "name": "Apple Watch Series 7", "price": 399.0},
    {"id": 14, "name": "Samsung Galaxy Watch 4", "price": 249.0},
    {"id": 15, "name": "Fitbit Charge 5", "price": 179.0},
    {"id": 16, "name": "GoPro HERO10", "price": 499.0},
    {"id": 17, "name": "Canon EOS R5", "price": 3899.0},
    {"id": 18, "name": "Nikon Z6 II", "price": 1999.0},
    {"id": 19, "name": "Sony A7 III", "price": 1999.0},
    {"id": 20, "name": "DJI Mavic Air 2", "price": 799.0},
    {"id": 21, "name": "Bose QuietComfort 35 II", "price": 299.0},
    {"id": 22, "name": "Jabra Elite 85t", "price": 229.0},
    {"id": 23, "name": "Apple AirPods Pro", "price": 249.0},
    {"id": 24, "name": "Samsung Galaxy Buds Pro", "price": 199.0},
    {"id": 25, "name": "Anker Soundcore Liberty Air 2 Pro", "price": 129.0},
    {"id": 26, "name": "Razer DeathAdder V2", "price": 69.0},
    {"id": 27, "name": "Logitech MX Master 3", "price": 99.0},
    {"id": 28, "name": "Corsair K95 RGB Platinum", "price": 199.0},
    {"id": 29, "name": "SteelSeries Apex Pro", "price": 199.0},
    {"id": 30, "name": "HyperX Cloud II", "price": 99.0},
    {"id": 31, "name": "Samsung QLED TV", "price": 1199.0},
    {"id": 32, "name": "LG OLED TV", "price": 1499.0},
    {"id": 33, "name": "Sony Bravia TV", "price": 1299.0},
    {"id": 34, "name": "TCL 6-Series TV", "price": 899.0},
    {"id": 35, "name": "Vizio M-Series TV", "price": 799.0},
    {"id": 36, "name": "Amazon Echo Dot", "price": 49.0},
    {"id": 37, "name": "Google Nest Mini", "price": 49.0},
    {"id": 38, "name": "Apple HomePod Mini", "price": 99.0},
    {"id": 39, "name": "Sonos One", "price": 199.0},
    {"id": 40, "name": "Roku Streaming Stick+", "price": 49.0},
]

# In-memory cart
cart = []

# Create class for Store
class Store:
    # Create class for rotating shop
    class _RotatingShop(Resource):
        def get(self):
            try:
                # Rotate products
                random.shuffle(products)
                # Return the rotated products as a JSON response
                return jsonify({"products": products})
            except Exception as e:
                return {'message': f'Error retrieving products: {str(e)}'}, 500

    # Create class for adding to cart
    class _AddToCart(Resource):
        def post(self):
            try:
                data = request.get_json()
                product_id = data['product_id']
                quantity = data['quantity']
                # Find the product by ID
                product = next((p for p in products if p["id"] == product_id), None)
                if not product:
                    return {'message': 'Product not found'}, 404
                # Add product to cart
                cart.append({"product": product, "quantity": quantity})
                return {'message': 'Product added to cart'}, 201
            except Exception as e:
                return {'message': f'Error adding product to cart: {str(e)}'}, 500

    # Create class for viewing cart
    class _ViewCart(Resource):
        def get(self):
            try:
                total_amount = sum(item['product']['price'] * item['quantity'] for item in cart)
                return jsonify({"cart": cart, "total_amount": total_amount})
            except Exception as e:
                return {'message': f'Error retrieving cart: {str(e)}'}, 500

    # Create class for checkout
    class _Checkout(Resource):
        def post(self):
            try:
                data = request.get_json()
                # Process payment (dummy implementation)
                payment_info = data['payment_info']
                address = data['address']
                # Clear the cart
                cart.clear()
                return {'message': 'Transaction successful'}, 201
            except Exception as e:
                return {'message': f'Error processing transaction: {str(e)}'}, 500

    # Create class for shipping
    class _Shipping(Resource):
        def get(self):
            try:
                # Return standard shipping information
                return jsonify({"shipping": "Standard shipping: 5-7 business days"})
            except Exception as e:
                return {'message': f'Error retrieving shipping information: {str(e)}'}, 500

# Add resources to the API
api.add_resource(Store._RotatingShop, '/store/rotating_shop')
api.add_resource(Store._AddToCart, '/store/add_to_cart')
api.add_resource(Store._ViewCart, '/store/view_cart')
api.add_resource(Store._Checkout, '/store/checkout')
api.add_resource(Store._Shipping, '/store/shipping')